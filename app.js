// Global Variables
let editor;
let currentTask = null;
let isDarkTheme = false;
let pyodide = null; // Pyodide instance
let isPyodideLoaded = false; // Pyodide y√ºkleme durumu
let userProgress = {
  level: 1,
  points: 0,
  completedTasks: [],
  achievements: [],
};

// Task Data
const tasks = [
  {
    id: 1,
    title: "Merhaba D√ºnya",
    description: "ƒ∞lk Python programƒ±nƒ±zƒ± yazƒ±n ve 'Merhaba D√ºnya' yazdƒ±rƒ±n.",
    difficulty: 1,
    category: "Temel",
    starterCode:
      '# ƒ∞lk Python programƒ±nƒ±zƒ± buraya yazƒ±n\nprint("Merhaba D√ºnya")',
    expectedOutput: "Merhaba D√ºnya",
    hints: ["print() fonksiyonunu kullanƒ±n", "Tƒ±rnak i≈üaretlerini unutmayƒ±n"],
    points: 10,
    solution: 'print("Merhaba D√ºnya")',
  },
  {
    id: 2,
    title: "Deƒüi≈ükenler ve Hesaplama",
    description: "ƒ∞ki sayƒ±yƒ± toplayan bir program yazƒ±n.",
    difficulty: 1,
    category: "Temel",
    starterCode:
      "# ƒ∞ki sayƒ±yƒ± toplayan program\nsayi1 = 5\nsayi2 = 3\n# Toplamƒ± hesaplayƒ±n ve yazdƒ±rƒ±n",
    expectedOutput: "8",
    hints: [
      "Toplama i√ßin + operat√∂r√ºn√º kullanƒ±n",
      "Sonucu print() ile yazdƒ±rƒ±n",
    ],
    points: 15,
    solution: "sayi1 = 5\nsayi2 = 3\ntoplam = sayi1 + sayi2\nprint(toplam)",
  },
  {
    id: 3,
    title: "D√∂ng√º ile Sayƒ±lar",
    description: "1'den 5'e kadar olan sayƒ±larƒ± yazdƒ±rƒ±n.",
    difficulty: 2,
    category: "D√∂ng√ºler",
    starterCode:
      "# 1'den 5'e kadar sayƒ±larƒ± yazdƒ±rƒ±n\nfor i in range(1, 6):\n    print(i)",
    expectedOutput: "1\n2\n3\n4\n5",
    hints: ["for d√∂ng√ºs√º kullanƒ±n", "range() fonksiyonunu kullanƒ±n"],
    points: 20,
    solution: "for i in range(1, 6):\n    print(i)",
  },
  {
    id: 4,
    title: "Tahmin Oyunu",
    description:
      "1-10 arasƒ± rastgele bir sayƒ± √ºretin ve kullanƒ±cƒ±dan tahmin etmesini isteyin.",
    difficulty: 3,
    category: "Oyunlar",
    starterCode:
      'import random\n\n# Rastgele sayƒ± √ºretin\nsayi = random.randint(1, 10)\nprint(f"1-10 arasƒ± bir sayƒ± tahmin edin: {sayi}")',
    expectedOutput: /1-10 arasƒ± bir sayƒ± tahmin edin: \d+/,
    hints: ["random.randint() kullanƒ±n", "f-string ile formatlama yapƒ±n"],
    points: 25,
    solution:
      'import random\nsayi = random.randint(1, 10)\nprint(f"1-10 arasƒ± bir sayƒ± tahmin edin: {sayi}")',
  },
  {
    id: 5,
    title: "Turtle ile √áizim",
    description: "Turtle kullanarak bir kare √ßizin.",
    difficulty: 2,
    category: "√áizim",
    starterCode:
      "import turtle\n\n# Turtle nesnesini olu≈üturun\nt = turtle.Turtle()\n\n# Kare √ßizin\nfor i in range(4):\n    t.forward(100)\n    t.right(90)\n\nturtle.done()",
    expectedOutput: "Kare √ßizildi",
    hints: [
      "turtle.Turtle() ile nesne olu≈üturun",
      "forward() ve right() metodlarƒ±nƒ± kullanƒ±n",
    ],
    points: 30,
    solution:
      "import turtle\nt = turtle.Turtle()\nfor i in range(4):\n    t.forward(100)\n    t.right(90)\nturtle.done()",
  },
  {
    id: 6,
    title: "Liste ƒ∞≈ülemleri",
    description: "Bir liste olu≈üturun ve elemanlarƒ±nƒ± toplayƒ±n.",
    difficulty: 2,
    category: "Veri Yapƒ±larƒ±",
    starterCode:
      '# Sayƒ±lar listesi olu≈üturun\nsayilar = [1, 2, 3, 4, 5]\n\n# Toplamƒ± hesaplayƒ±n\ntoplam = sum(sayilar)\nprint(f"Toplam: {toplam}")',
    expectedOutput: "Toplam: 15",
    hints: ["sum() fonksiyonunu kullanƒ±n", "f-string ile formatlama yapƒ±n"],
    points: 20,
    solution:
      'sayilar = [1, 2, 3, 4, 5]\ntoplam = sum(sayilar)\nprint(f"Toplam: {toplam}")',
  },
  {
    id: 7,
    title: "Fonksiyon Yazma",
    description: "ƒ∞ki sayƒ±yƒ± √ßarpan bir fonksiyon yazƒ±n.",
    difficulty: 3,
    category: "Fonksiyonlar",
    starterCode:
      'def carp(a, b):\n    return a * b\n\n# Fonksiyonu test edin\nsonuc = carp(4, 5)\nprint(f"4 x 5 = {sonuc}")',
    expectedOutput: "4 x 5 = 20",
    hints: ["def ile fonksiyon tanƒ±mlayƒ±n", "return ile sonucu d√∂nd√ºr√ºn"],
    points: 25,
    solution:
      'def carp(a, b):\n    return a * b\nsonuc = carp(4, 5)\nprint(f"4 x 5 = {sonuc}")',
  },
  {
    id: 8,
    title: "Ko≈üullu ƒ∞fadeler",
    description:
      "Bir sayƒ±nƒ±n pozitif, negatif veya sƒ±fƒ±r olduƒüunu kontrol edin.",
    difficulty: 2,
    category: "Ko≈üullar",
    starterCode:
      'sayi = 7\n\nif sayi > 0:\n    print("Pozitif")\nelif sayi < 0:\n    print("Negatif")\nelse:\n    print("Sƒ±fƒ±r")',
    expectedOutput: "Pozitif",
    hints: ["if, elif, else kullanƒ±n", "Kar≈üƒ±la≈ütƒ±rma operat√∂rlerini kullanƒ±n"],
    points: 20,
    solution:
      'sayi = 7\nif sayi > 0:\n    print("Pozitif")\nelif sayi < 0:\n    print("Negatif")\nelse:\n    print("Sƒ±fƒ±r")',
  },
  {
    id: 9,
    title: "Matematik ƒ∞≈ülemleri",
    description: "Karma≈üƒ±k matematik i≈ülemleri yapƒ±n.",
    difficulty: 2,
    category: "Temel",
    starterCode:
      "import math\n\n# Pi sayƒ±sƒ±nƒ± kullanarak daire alanƒ± hesaplayƒ±n\nr = 5\nalan = math.pi * r ** 2\nprint(f'Yarƒ±√ßapƒ± {r} olan dairenin alanƒ±: {alan:.2f}')",
    expectedOutput: /Yarƒ±√ßapƒ± 5 olan dairenin alanƒ±: 78\.54/,
    hints: ["math.pi kullanƒ±n", "** operat√∂r√º ile √ºs alƒ±n"],
    points: 25,
    solution:
      "import math\nr = 5\nalan = math.pi * r ** 2\nprint(f'Yarƒ±√ßapƒ± {r} olan dairenin alanƒ±: {alan:.2f}')",
  },
  {
    id: 10,
    title: "String ƒ∞≈ülemleri",
    description: "String metodlarƒ±nƒ± kullanarak metin i≈ülemleri yapƒ±n.",
    difficulty: 2,
    category: "Temel",
    starterCode:
      'metin = "Python Programlama Dili"\n\n# Metni b√ºy√ºk harfe √ßevirin\nbuyuk = metin.upper()\nprint(buyuk)\n\n# Kelime sayƒ±sƒ±nƒ± bulun\nkelime_sayisi = len(metin.split())\nprint(f"Kelime sayƒ±sƒ±: {kelime_sayisi}")',
    expectedOutput: "PYTHON PROGRAMLAMA Dƒ∞Lƒ∞\nKelime sayƒ±sƒ±: 3",
    hints: ["upper() metodunu kullanƒ±n", "split() ile kelimeleri ayƒ±rƒ±n"],
    points: 20,
    solution:
      'metin = "Python Programlama Dili"\nbuyuk = metin.upper()\nprint(buyuk)\nkelime_sayisi = len(metin.split())\nprint(f"Kelime sayƒ±sƒ±: {kelime_sayisi}")',
  },
];

// Achievements Data
const achievements = [
  {
    id: 1,
    title: "ƒ∞lk Adƒ±m",
    description: "ƒ∞lk g√∂revi tamamladƒ±nƒ±z!",
    icon: "üéØ",
    condition: () => userProgress.completedTasks.length >= 1,
  },
  {
    id: 2,
    title: "Kod Ustasƒ±",
    description: "5 g√∂rev tamamladƒ±nƒ±z!",
    icon: "üèÜ",
    condition: () => userProgress.completedTasks.length >= 5,
  },
  {
    id: 3,
    title: "Puan Avcƒ±sƒ±",
    description: "100 puan topladƒ±nƒ±z!",
    icon: "‚≠ê",
    condition: () => userProgress.points >= 100,
  },
  {
    id: 4,
    title: "Hƒ±zlƒ± Kodlayƒ±cƒ±",
    description: "3 g√∂revi ilk denemede tamamladƒ±nƒ±z!",
    icon: "‚ö°",
    condition: () => userProgress.firstTryCompletions >= 3,
  },
];

// Initialize Application
document.addEventListener("DOMContentLoaded", function () {
  initializeEditor();
  loadUserProgress();
  renderTasks();
  renderProgressMap();
  setupEventListeners();
  updateUI();
  initializePyodide(); // Pyodide'i ba≈ülat
});

// Initialize Pyodide
async function initializePyodide() {
  try {
    showOutput("info", "üêç Python runtime y√ºkleniyor...");

    // Pyodide'i y√ºkle
    pyodide = await loadPyodide({
      indexURL: "https://cdn.jsdelivr.net/pyodide/v0.24.1/full/",
    });

    // Gerekli paketleri y√ºkle
    await pyodide.loadPackage(["numpy", "matplotlib", "pandas"]);

    isPyodideLoaded = true;
    showOutput(
      "success",
      "‚úÖ Python runtime ba≈üarƒ±yla y√ºklendi! Ger√ßek Python kodlarƒ± √ßalƒ±≈ütƒ±rabilirsiniz."
    );

    // UI'ƒ± g√ºncelle
    updateUI();
  } catch (error) {
    console.error("Pyodide y√ºkleme hatasƒ±:", error);
    showOutput(
      "error",
      "‚ùå Python runtime y√ºklenemedi. Sim√ºlasyon modunda √ßalƒ±≈üƒ±yoruz."
    );
    isPyodideLoaded = false;
  }
}

// Initialize CodeMirror Editor
function initializeEditor() {
  const textarea = document.getElementById("codeEditor");

  editor = CodeMirror.fromTextArea(textarea, {
    mode: "python",
    theme: isDarkTheme ? "monokai" : "default",
    lineNumbers: true,
    autoCloseBrackets: true,
    matchBrackets: true,
    indentUnit: 4,
    tabSize: 4,
    indentWithTabs: false,
    lineWrapping: true,
    extraKeys: {
      "Ctrl-Space": "autocomplete",
      Tab: function (cm) {
        if (cm.somethingSelected()) {
          cm.indentSelection("add");
        } else {
          cm.replaceSelection("    ", "end");
        }
      },
    },
  });

  // Set initial content
  editor.setValue("# Python kodunuzu buraya yazƒ±n\nprint('Merhaba D√ºnya')");
}

// Load User Progress from LocalStorage
function loadUserProgress() {
  const saved = localStorage.getItem("pythonEditorProgress");
  if (saved) {
    userProgress = JSON.parse(saved);
  }
}

// Save User Progress to LocalStorage
function saveUserProgress() {
  localStorage.setItem("pythonEditorProgress", JSON.stringify(userProgress));
}

// Render Tasks in Sidebar
function renderTasks() {
  const taskList = document.getElementById("taskList");
  taskList.innerHTML = "";

  tasks.forEach((task) => {
    const taskElement = document.createElement("div");
    taskElement.className = `task-item ${
      userProgress.completedTasks.includes(task.id) ? "completed" : ""
    }`;
    taskElement.dataset.taskId = task.id;

    const difficultyDots =
      "‚óè".repeat(task.difficulty) + "‚óã".repeat(5 - task.difficulty);

    taskElement.innerHTML = `
            <div class="task-title">${task.title}</div>
            <div class="task-description">${task.description}</div>
            <div class="task-difficulty">${difficultyDots}</div>
        `;

    taskElement.addEventListener("click", () => selectTask(task));
    taskList.appendChild(taskElement);
  });
}

// Render Progress Map
function renderProgressMap() {
  const progressMap = document.getElementById("progressMap");
  progressMap.innerHTML = "";

  const categories = [...new Set(tasks.map((task) => task.category))];

  categories.forEach((category) => {
    const categoryTasks = tasks.filter((task) => task.category === category);
    const completedTasks = categoryTasks.filter((task) =>
      userProgress.completedTasks.includes(task.id)
    );

    const progressNode = document.createElement("div");
    progressNode.className = `progress-node ${
      completedTasks.length === categoryTasks.length ? "completed" : ""
    }`;

    progressNode.innerHTML = `
            <span>${getCategoryIcon(category)}</span>
            <div>
                <div>${category}</div>
                <small>${completedTasks.length}/${
      categoryTasks.length
    } tamamlandƒ±</small>
            </div>
        `;

    progressMap.appendChild(progressNode);
  });
}

// Get Category Icon
function getCategoryIcon(category) {
  const icons = {
    Temel: "üìù",
    D√∂ng√ºler: "üîÑ",
    Oyunlar: "üéÆ",
    √áizim: "üé®",
    "Veri Yapƒ±larƒ±": "üìä",
    Fonksiyonlar: "‚öôÔ∏è",
    Ko≈üullar: "‚ùì",
  };
  return icons[category] || "üìö";
}

// Select Task
function selectTask(task) {
  currentTask = task;

  // Update active task in sidebar
  document.querySelectorAll(".task-item").forEach((item) => {
    item.classList.remove("active");
  });
  document.querySelector(`[data-task-id="${task.id}"]`).classList.add("active");

  // Update editor content
  editor.setValue(task.starterCode);

  // Update task title
  document.getElementById("currentTaskTitle").textContent = task.title;

  // Clear output
  clearOutput();

  // Show welcome message
  showOutput(
    "info",
    `üéØ G√∂rev: ${task.title}\nüìù ${task.description}\nüèÜ Puan: ${task.points}`
  );
}

// Setup Event Listeners
function setupEventListeners() {
  // Theme toggle button
  document.getElementById("themeBtn").addEventListener("click", toggleTheme);

  // Run button
  document.getElementById("runBtn").addEventListener("click", runCode);

  // Reset button
  document.getElementById("resetBtn").addEventListener("click", resetCode);

  // Hint button
  document.getElementById("hintBtn").addEventListener("click", showHint);

  // Clear output button
  document
    .getElementById("clearOutputBtn")
    .addEventListener("click", clearOutput);

  // Modal buttons
  document
    .getElementById("profileBtn")
    .addEventListener("click", () => showModal("profileModal"));
  document
    .getElementById("helpBtn")
    .addEventListener("click", () => showModal("helpModal"));

  // Close modal buttons
  document
    .getElementById("closeProfileModal")
    .addEventListener("click", () => hideModal("profileModal"));
  document
    .getElementById("closeHelpModal")
    .addEventListener("click", () => hideModal("helpModal"));

  // Close modal on outside click
  document.querySelectorAll(".modal").forEach((modal) => {
    modal.addEventListener("click", (e) => {
      if (e.target === modal) {
        modal.classList.remove("show");
      }
    });
  });
}

// Run Python Code
function runCode() {
  if (!currentTask) {
    showOutput("error", "‚ùå L√ºtfen √∂nce bir g√∂rev se√ßin!");
    return;
  }

  const code = editor.getValue();
  showOutput("info", "üîÑ Kod √ßalƒ±≈ütƒ±rƒ±lƒ±yor...");

  // Pyodide y√ºkl√ºyse ger√ßek Python √ßalƒ±≈ütƒ±r, deƒüilse sim√ºlasyon kullan
  if (isPyodideLoaded && pyodide) {
    runRealPython(code);
  } else {
    runSimulatedPython(code);
  }
}

// Ger√ßek Python √ßalƒ±≈ütƒ±rma (Pyodide ile)
async function runRealPython(code) {
  try {
    // √áƒ±ktƒ±yƒ± yakalamak i√ßin stdout'u y√∂nlendir
    pyodide.runPython(`
import sys
import io
sys.stdout = io.StringIO()
`);

    // Kodu √ßalƒ±≈ütƒ±r
    await pyodide.runPythonAsync(code);

    // √áƒ±ktƒ±yƒ± al
    const output = pyodide.runPython("sys.stdout.getvalue()");

    // stdout'u geri y√ºkle
    pyodide.runPython("sys.stdout = sys.__stdout__");

    showOutput(
      "success",
      `‚úÖ Ger√ßek Python kodu √ßalƒ±≈ütƒ±rƒ±ldƒ±!\n\nüì§ √áƒ±ktƒ±:\n${output}`
    );

    // G√∂rev tamamlama kontrol√º
    if (checkTaskCompletion(output, currentTask)) {
      completeTask(currentTask);
    }
  } catch (error) {
    showOutput("error", `‚ùå Python hatasƒ±:\n${error.message}`);
  }
}

// Sim√ºlasyon modu (eski sistem)
function runSimulatedPython(code) {
  setTimeout(() => {
    try {
      const result = simulatePythonExecution(code);

      if (result.success) {
        showOutput(
          "success",
          `‚úÖ Kod sim√ºlasyonu √ßalƒ±≈ütƒ±rƒ±ldƒ±!\n\nüì§ √áƒ±ktƒ±:\n${result.output}`
        );

        if (checkTaskCompletion(code, currentTask)) {
          completeTask(currentTask);
        }
      } else {
        showOutput("error", `‚ùå Hata olu≈ütu:\n${result.error}`);
      }
    } catch (error) {
      showOutput("error", `‚ùå Beklenmeyen hata:\n${error.message}`);
    }
  }, 1000);
}

// Simulate Python Execution
function simulatePythonExecution(code) {
  // This is a simplified simulation - in a real app, you'd use a Python backend
  const lines = code.split("\n");
  let output = "";
  let error = null;

  try {
    // Basic Python syntax checking and output simulation
    for (let line of lines) {
      line = line.trim();

      if (line.startsWith("print(") && line.endsWith(")")) {
        const content = line.slice(6, -1);
        output += content.replace(/['"]/g, "") + "\n";
      } else if (line.includes("import")) {
        // Handle imports
        continue;
      } else if (line.includes("=")) {
        // Handle variable assignments
        continue;
      } else if (
        line.startsWith("for ") ||
        line.startsWith("if ") ||
        line.startsWith("def ")
      ) {
        // Handle control structures
        continue;
      } else if (line.includes("turtle")) {
        output += "Kare √ßizildi\n";
      } else if (line.includes("random")) {
        const match = line.match(/randint\((\d+),\s*(\d+)\)/);
        if (match) {
          const min = parseInt(match[1]);
          const max = parseInt(match[2]);
          const randomNum = Math.floor(Math.random() * (max - min + 1)) + min;
          output += `1-10 arasƒ± bir sayƒ± tahmin edin: ${randomNum}\n`;
        }
      }
    }

    return { success: true, output: output.trim() };
  } catch (e) {
    return { success: false, error: e.message };
  }
}

// Check Task Completion
function checkTaskCompletion(output, task) {
  // Ger√ßek Python √ßƒ±ktƒ±sƒ± ile kar≈üƒ±la≈ütƒ±r
  if (task.expectedOutput instanceof RegExp) {
    return task.expectedOutput.test(output);
  } else {
    return output.includes(task.expectedOutput);
  }
}

// Complete Task
function completeTask(task) {
  if (userProgress.completedTasks.includes(task.id)) {
    return; // Already completed
  }

  // Add to completed tasks
  userProgress.completedTasks.push(task.id);

  // Add points
  userProgress.points += task.points;

  // Check for level up
  const newLevel = Math.floor(userProgress.points / 100) + 1;
  if (newLevel > userProgress.level) {
    userProgress.level = newLevel;
    showLevelUpAnimation();
  }

  // Save progress
  saveUserProgress();

  // Update UI
  updateUI();
  renderTasks();
  renderProgressMap();

  // Show success animation
  showSuccessAnimation();

  // Show completion message
  setTimeout(() => {
    showOutput(
      "success",
      `üéâ Tebrikler! G√∂rev tamamlandƒ±!\nüèÜ ${task.points} puan kazandƒ±nƒ±z!\n‚≠ê Toplam puanƒ±nƒ±z: ${userProgress.points}`
    );
  }, 1000);
}

// Reset Code
function resetCode() {
  if (currentTask) {
    editor.setValue(currentTask.starterCode);
    clearOutput();
    showOutput("info", "üîÑ Kod sƒ±fƒ±rlandƒ±. Ba≈ülangƒ±√ß koduna d√∂nd√ºn√ºz.");
  }
}

// Show Hint
function showHint() {
  if (!currentTask) {
    showOutput("error", "‚ùå L√ºtfen √∂nce bir g√∂rev se√ßin!");
    return;
  }

  const hints = currentTask.hints;
  const randomHint = hints[Math.floor(Math.random() * hints.length)];

  showOutput("info", `üí° ƒ∞pucu: ${randomHint}`);
}

// Show Output
function showOutput(type, message) {
  const outputContent = document.getElementById("outputContent");
  const outputDiv = document.createElement("div");
  outputDiv.className = `output-${type}`;
  outputDiv.textContent = message;

  outputContent.appendChild(outputDiv);
  outputContent.scrollTop = outputContent.scrollHeight;
}

// Clear Output
function clearOutput() {
  const outputContent = document.getElementById("outputContent");
  outputContent.innerHTML = `
        <div class="welcome-message">
            <h3>üéâ Python Kod Edit√∂r√ºne Ho≈ü Geldiniz!</h3>
            <p>Sol men√ºden bir g√∂rev se√ßin ve kodlamaya ba≈ülayƒ±n.</p>
            <div class="features">
                <div class="feature">
                    <span>üé®</span>
                    <p>Syntax Highlighting</p>
                </div>
                <div class="feature">
                    <span>‚ö°</span>
                    <p>Hƒ±zlƒ± √áalƒ±≈ütƒ±rma</p>
                </div>
                <div class="feature">
                    <span>üèÜ</span>
                    <p>Puan Sistemi</p>
                </div>
                <div class="feature">
                    <span>üéØ</span>
                    <p>G√∂revler</p>
                </div>
            </div>
        </div>
    `;
}

// Show Success Animation
function showSuccessAnimation() {
  createConfetti();

  // Add success class to run button
  const runBtn = document.getElementById("runBtn");
  runBtn.classList.add("success-animation");
  setTimeout(() => runBtn.classList.remove("success-animation"), 500);
}

// Create Confetti Animation
function createConfetti() {
  const confettiContainer = document.getElementById("confettiContainer");
  const colors = [
    "#ff6b6b",
    "#4ecdc4",
    "#45b7d1",
    "#96ceb4",
    "#feca57",
    "#ff9ff3",
  ];

  for (let i = 0; i < 50; i++) {
    const confetti = document.createElement("div");
    confetti.className = "confetti";
    confetti.style.left = Math.random() * 100 + "%";
    confetti.style.backgroundColor =
      colors[Math.floor(Math.random() * colors.length)];
    confetti.style.animationDelay = Math.random() * 3 + "s";
    confetti.style.animationDuration = Math.random() * 3 + 2 + "s";

    confettiContainer.appendChild(confetti);

    setTimeout(() => {
      confetti.remove();
    }, 5000);
  }
}

// Show Level Up Animation
function showLevelUpAnimation() {
  const levelBadge = document.querySelector(".level-badge");
  levelBadge.textContent = `Seviye ${userProgress.level}`;
  levelBadge.classList.add("bounce");

  setTimeout(() => {
    levelBadge.classList.remove("bounce");
  }, 1000);

  showOutput(
    "success",
    `üéâ Seviye atladƒ±nƒ±z! Yeni seviyeniz: ${userProgress.level}`
  );
}

// Update UI
function updateUI() {
  // Update level and points
  const levelBadge = document.querySelector(".level-badge");
  const progressFill = document.querySelector(".progress-fill");
  const pointsSpan = document.querySelector(".points");
  const totalPoints = document.getElementById("totalPoints");
  const completedTasks = document.getElementById("completedTasks");
  const currentLevel = document.getElementById("currentLevel");

  if (levelBadge) levelBadge.textContent = `Seviye ${userProgress.level}`;
  if (progressFill) {
    const progress = ((userProgress.points % 100) / 100) * 100;
    progressFill.style.width = `${progress}%`;
  }
  if (pointsSpan) pointsSpan.textContent = `${userProgress.points} Puan`;
  if (totalPoints) totalPoints.textContent = userProgress.points;
  if (completedTasks)
    completedTasks.textContent = userProgress.completedTasks.length;
  if (currentLevel) currentLevel.textContent = userProgress.level;

  // Pyodide durumunu g√∂ster
  const runBtn = document.getElementById("runBtn");
  if (runBtn) {
    if (isPyodideLoaded) {
      runBtn.innerHTML = "üêç √áalƒ±≈ütƒ±r (Ger√ßek Python)";
      runBtn.title = "Ger√ßek Python runtime ile √ßalƒ±≈ütƒ±r";
    } else {
      runBtn.innerHTML = "üîÑ √áalƒ±≈ütƒ±r (Sim√ºlasyon)";
      runBtn.title = "Sim√ºlasyon modunda √ßalƒ±≈ütƒ±r";
    }
  }

  // Update achievements
  updateAchievements();
}

// Update Achievements
function updateAchievements() {
  const achievementList = document.getElementById("achievementList");
  achievementList.innerHTML = "";

  achievements.forEach((achievement) => {
    const isUnlocked = achievement.condition();
    const achievementElement = document.createElement("div");
    achievementElement.className = `achievement-item ${
      isUnlocked ? "unlocked" : ""
    }`;

    achievementElement.innerHTML = `
            <span class="achievement-icon">${achievement.icon}</span>
            <div class="achievement-info">
                <h5>${achievement.title}</h5>
                <p>${achievement.description}</p>
            </div>
        `;

    achievementList.appendChild(achievementElement);
  });
}

// Show Modal
function showModal(modalId) {
  const modal = document.getElementById(modalId);
  modal.classList.add("show");
}

// Hide Modal
function hideModal(modalId) {
  const modal = document.getElementById(modalId);
  modal.classList.remove("show");
}

// Keyboard Shortcuts
document.addEventListener("keydown", function (e) {
  if (e.ctrlKey || e.metaKey) {
    switch (e.key) {
      case "Enter":
        e.preventDefault();
        runCode();
        break;
      case "r":
        e.preventDefault();
        resetCode();
        break;
      case "h":
        e.preventDefault();
        showHint();
        break;
    }
  }
});

// Auto-save code changes
editor.on("change", function () {
  if (currentTask) {
    // Save current code to localStorage
    localStorage.setItem(`task_${currentTask.id}_code`, editor.getValue());
  }
});

// Load saved code when selecting task
function loadSavedCode(taskId) {
  const savedCode = localStorage.getItem(`task_${taskId}_code`);
  if (savedCode) {
    return savedCode;
  }
  return null;
}

// Enhanced task selection with saved code
function selectTask(task) {
  currentTask = task;

  // Update active task in sidebar
  document.querySelectorAll(".task-item").forEach((item) => {
    item.classList.remove("active");
  });
  document.querySelector(`[data-task-id="${task.id}"]`).classList.add("active");

  // Load saved code or use starter code
  const savedCode = loadSavedCode(task.id);
  editor.setValue(savedCode || task.starterCode);

  // Update task title
  document.getElementById("currentTaskTitle").textContent = task.title;

  // Clear output
  clearOutput();

  // Show welcome message
  showOutput(
    "info",
    `üéØ G√∂rev: ${task.title}\nüìù ${task.description}\nüèÜ Puan: ${task.points}`
  );
}

// Theme Toggle Function
function toggleTheme() {
  isDarkTheme = !isDarkTheme;
  const body = document.body;
  const themeBtn = document.getElementById("themeBtn");

  if (isDarkTheme) {
    body.classList.add("dark-theme");
    themeBtn.textContent = "‚òÄÔ∏è";
    themeBtn.title = "A√ßƒ±k temaya ge√ß";
  } else {
    body.classList.remove("dark-theme");
    themeBtn.textContent = "üåô";
    themeBtn.title = "Koyu temaya ge√ß";
  }

  // Save theme preference to localStorage
  localStorage.setItem("darkTheme", isDarkTheme);

  // Update CodeMirror theme if editor exists
  if (editor) {
    if (isDarkTheme) {
      editor.setOption("theme", "monokai");
    } else {
      editor.setOption("theme", "default");
    }
  }
}

// Load theme preference on startup
function loadThemePreference() {
  const savedTheme = localStorage.getItem("darkTheme");
  if (savedTheme === "true") {
    isDarkTheme = true;
    document.body.classList.add("dark-theme");
    document.getElementById("themeBtn").textContent = "‚òÄÔ∏è";
    document.getElementById("themeBtn").title = "A√ßƒ±k temaya ge√ß";
  } else {
    document.getElementById("themeBtn").title = "Koyu temaya ge√ß";
  }
}

// Initialize theme on page load
document.addEventListener("DOMContentLoaded", function () {
  loadThemePreference();
});
